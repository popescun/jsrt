
namespace DOM 
{
  // generator, walks through descendants of the root hierarchically  
  // use it as 
  //   for(var el in descendantsOf(body) )
  //     el ....

  function* descendantsOf(root, from) 
  {
    function next( el )
    {
      var t = el.next;
      if( t ) return t;
      while(el)
      {
        el = el.parent;
        if( el === root || !el) return null;
        t = el.next;
        if( t ) return t;
      }
      assert false;
      return null;
    }
    function firstOrNext( el )
    {
      var t = el.first;
      return t? t: next(el);
    }
    
    var b = from ? next( from ) : root.first;
    while(b)
    {
      yield b; 
      b = firstOrNext( b );
    }
  }

  // generator, walks through each node of the root
  function* eachNodeIn(root) 
  {
    function next( el )
    {
      var t = el.nextNode;
      if( t ) return t;
      while(el)
      {
        el = el.parent;
        if( el === root) return null;
        t = el.nextNode;
        if( t ) return t;
      }
      assert false;
      return null;
    }
    function firstOrNext( el )
    {
      var t = el.firstNode;
      return t? t: next(el);
    }
    
    var b = root.first;
    while(b)
    {
      yield b; 
      b = firstOrNext( b );
    }
  }

  /*function isBlock(node) {
    if( !node.isElement ) return false; 
    var ft = node.state.flowType;
    if( !ft ) return false;
    if( ft == #text ) continue;
  }*/


  // function returns nearest block container - element that contains blocks (<body>)
  function blocksContainerOf(node) 
  {
    if( !node.isElement ) node = node.parent;
    var body = node.$p(body) || node.root;
    for(; node ; node = node.parent ) {
      if( node === body ) return node;
      var ft = node.state.flowType;
      if( !ft ) continue;
      if( ft == #text ) continue;
      return node;
    }
    return body;
  }

  // function returns nearest parent block or the node itself if it is a block
  function blockOf(node) 
  {
    if( !node.isElement ) node = node.parent;
    var body = node.$p(body) || node.root;
    for(; node ; node = node.parent ) {
      if( node === body ) return node;
      var ft = node.state.flowType;
      if( !ft ) continue;
      return node;
    }
    return body;
  }


  // function returns nearest block container - element that contains blocks (<body>)
  // but not the node itself
  /*function blockParentOf(node) 
  {
    node = node.parent;
    var body = node.$p(body) || node.root;
    for(; node ; node = node.parent ) {
      if( node === body ) return node;
      if( node.state.flowType != #text ) return node;
    }
    return body;
  }*/


  function getMeta(doc,metaName) {
    var el = doc.$(head > meta[name=="{metaName}"]);
    if( !el ) return "";
    return el.attributes["content"];
  }

  function getTitle(doc) {
    var el = doc.$(head > title);
    if( !el ) return "";
    return el.text;
  }

  // returns caption string of the document content
  function caption(doc) 
  {
    var body = doc.$(body);

    var header = body.$(h1,h2,h3);
    if( header ) return header.text;

    // no luck, getting first text container
   
    for( var el in DOM.descendantsOf(body,null) ) 
      if( el.state.flowType == #text ) {
        var text = el.text.trim();
        if(text) return text;
      }
    
    return doc.text;
  }



}